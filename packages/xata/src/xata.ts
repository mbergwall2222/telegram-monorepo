// Generated by Xata Codegen 0.28.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "messages",
    columns: [
      { name: "date", type: "datetime" },
      { name: "messageId", type: "string" },
      { name: "messageText", type: "text" },
      { name: "fromUser", type: "link", link: { table: "users" } },
      { name: "toChat", type: "link", link: { table: "chats" } },
      { name: "media", type: "link", link: { table: "documents" } },
      { name: "groupId", type: "string" },
      { name: "inReplyToId", type: "string" },
      { name: "entities", type: "json" },
    ],
    revLinks: [{ column: "message", table: "tags_to_messages" }],
  },
  {
    name: "users",
    columns: [
      { name: "userId", type: "string" },
      { name: "firstName", type: "string" },
      { name: "lastName", type: "string" },
      { name: "username", type: "string" },
      { name: "pfpUrl", type: "string" },
      { name: "description", type: "string" },
    ],
    revLinks: [
      { column: "fromUser", table: "messages" },
      { column: "user", table: "tags_to_users" },
    ],
  },
  {
    name: "chats",
    columns: [
      { name: "isGroup", type: "bool" },
      { name: "isChannel", type: "bool" },
      { name: "title", type: "string" },
      { name: "memberCount", type: "int" },
      { name: "pfpUrl", type: "string" },
      { name: "lastMessageDate", type: "datetime" },
      { name: "description", type: "string" },
    ],
    revLinks: [
      { column: "toChat", table: "messages" },
      { column: "chat", table: "tags_to_chats" },
    ],
  },
  {
    name: "documents",
    columns: [
      { name: "fileId", type: "string" },
      { name: "fileName", type: "string" },
      { name: "fileSize", type: "int" },
      { name: "mimeType", type: "string" },
      { name: "fileUrl", type: "string" },
    ],
    revLinks: [{ column: "media", table: "messages" }],
  },
  {
    name: "tags",
    columns: [
      { name: "name", type: "string" },
      { name: "description", type: "string" },
      { name: "variant", type: "string" },
      { name: "order", type: "int" },
    ],
    revLinks: [
      { column: "tag", table: "tags_to_chats" },
      { column: "tag", table: "tags_to_users" },
      { column: "tag", table: "tags_to_messages" },
    ],
  },
  {
    name: "tags_to_chats",
    columns: [
      { name: "tag", type: "link", link: { table: "tags" } },
      { name: "chat", type: "link", link: { table: "chats" } },
    ],
  },
  {
    name: "tags_to_users",
    columns: [
      { name: "tag", type: "link", link: { table: "tags" } },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "tags_to_messages",
    columns: [
      { name: "tag", type: "link", link: { table: "tags" } },
      { name: "message", type: "link", link: { table: "messages" } },
    ],
  },
  {
    name: "messageEntities",
    columns: [
      { name: "entity", type: "string" },
      { name: "date", type: "datetime" },
      { name: "messageId", type: "string" },
      { name: "chatId", type: "string" },
      { name: "userId", type: "string" },
    ],
  },
  {
    name: "savedFilters",
    columns: [
      { name: "name", type: "string" },
      { name: "type", type: "string" },
      { name: "params", type: "string" },
      { name: "userId", type: "string" },
      { name: "orgId", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Messages = InferredTypes["messages"];
export type MessagesRecord = Messages & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Chats = InferredTypes["chats"];
export type ChatsRecord = Chats & XataRecord;

export type Documents = InferredTypes["documents"];
export type DocumentsRecord = Documents & XataRecord;

export type Tags = InferredTypes["tags"];
export type TagsRecord = Tags & XataRecord;

export type TagsToChats = InferredTypes["tags_to_chats"];
export type TagsToChatsRecord = TagsToChats & XataRecord;

export type TagsToUsers = InferredTypes["tags_to_users"];
export type TagsToUsersRecord = TagsToUsers & XataRecord;

export type TagsToMessages = InferredTypes["tags_to_messages"];
export type TagsToMessagesRecord = TagsToMessages & XataRecord;

export type MessageEntities = InferredTypes["messageEntities"];
export type MessageEntitiesRecord = MessageEntities & XataRecord;

export type SavedFilters = InferredTypes["savedFilters"];
export type SavedFiltersRecord = SavedFilters & XataRecord;

export type DatabaseSchema = {
  messages: MessagesRecord;
  users: UsersRecord;
  chats: ChatsRecord;
  documents: DocumentsRecord;
  tags: TagsRecord;
  tags_to_chats: TagsToChatsRecord;
  tags_to_users: TagsToUsersRecord;
  tags_to_messages: TagsToMessagesRecord;
  messageEntities: MessageEntitiesRecord;
  savedFilters: SavedFiltersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Matthew-Bergwall-s-workspace-8jps3o.us-east-1.xata.sh/db/telegram",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
